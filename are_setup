#!/bin/bash

# Script created by Davide Marchegiani at ACCESS-NRI (davide.marchegiani@anu.edu.au) to atumatically setup 
# the tunnel to be used by VSCode or ssh after starting a JupyterLab session on https://are.nci.org.au/

# !!! Change "gadi" with the host name for gadi in your ssh config file !!!
host_gadi="gadi"
# !!! Change "are" with the host name for the ARE session in your ssh config file !!!
# (If you don't have one yet, change it to how you would like to call it)
host_ARE="are"

# Safety check
# ssh config file
ssh_config_file=~/.ssh/config
check=$(grep "Host $host_gadi\s*" $ssh_config_file)
if [[ -z $check ]]; then
    cat<<EOF
No "Host $host_gadi" found in the ssh config file.
Please change the "host_gadi" variable in this script to match that of the config file and rerun.
EOF
    exit 3
fi

# write tmp script to get are configuration on gadi
cat > tmp_are_script <<'EOFF'
#!/bin/bash

err_msg() {
    >&2 echo No Jupyter session running. Please start a JupyterLab session on https://are.nci.org.au/.
    exit 1
}

err_msg2() {
    >&2 echo The session is taking too long to start. Run the script again when the session has already started.
    exit 2
}

# Check that jupyter session is active
jupyter_jobname=sys-dashboard-sys-jupyter-ncigadi
jobnames=$(qstat -f | grep -oP "(?<=Job_Name = ).*")
if ! [[ "$jobnames" == *"$jupyter_jobname"* ]]; then
    err_msg
fi

# Identify connection file
dir=$(ls ~/ondemand/data/sys/dashboard/batch_connect/sys/jupyter/ncigadi/output -t | head -n1)
connection_file=~/ondemand/data/sys/dashboard/batch_connect/sys/jupyter/ncigadi/output/${dir}/connection.yml

# Check if session is already running, otherwise wait until it runs (max 1min)
if ! [[ -f $connection_file ]]; then
    >&2 echo "Waiting for the JupyterLab session to start..."
    tries=20
    while ! [[ -f $connection_file ]]; do    
        sleep 3
        ((tries--))
        if [[ $tries == 0 ]]; then 
            err_msg2
        fi
    done
fi

# Read host and port from connection file
host=$(cat $connection_file | grep -Po "(?<=host: ).*")
port=$(cat $connection_file | grep -Po "(?<=port: ).*")

are_ssh_config=$(cat <<EOF
        ProxyJump ${USER}\@gadi.nci.org.au
        User ${USER}
        ForwardX11 true
        ForwardX11Trusted yes
        Hostname ${host}
        LocalForward ${port} ${host}:${port}
EOF
)

echo "$are_ssh_config"
EOFF

# Copy the tmp script
scp tmp_are_script "$host_gadi":~/ > /dev/null

# run the tmp script on gadi
ssh "$host_gadi" chmod +x \~/tmp_are_script
new_block=$(ssh "$host_gadi" \~/tmp_are_script)
EC=$?
if [[ $EC != 0 ]]; then
    # Delete tmp script both locally and on gadi
    ssh "$host_gadi" rm \~/tmp_are_script
    rm tmp_are_script
    exit $EC 
fi

# Delete tmp script both locally and on gadi
ssh "$host_gadi" rm \~/tmp_are_script
rm tmp_are_script

match=$(grep "Host $host_ARE\s*" "$ssh_config_file")
# If there is no block for the ARE already present in the ssh config file...
if [[ -z $match ]]; then
# Remove the escape character before the "@" in the new_block (necessary for perl but messes up here)
    new_block=$(echo "$new_block" | sed 's/\\//')
# Append the configuration block in the ssh confifg file    
    cat >> $ssh_config_file <<EOF

Host $host_ARE
$new_block
EOF
else 
# If the block already exist, substitute it with the new one
    perl -0777 -i -pe "s/($host_ARE\s*\n)[\s\S]*?(?=\n\n|Host\s|\z)/\$1$new_block\$2/s" $ssh_config_file
fi


cat <<EOF
You are ready to connect through VSCode or ssh!
EOF