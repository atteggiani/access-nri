#!/bin/bash

# Script created by Davide Marchegiani at ACCESS-NRI (davide.marchegiani@anu.edu.au) to start a session on gadi
# and connect to it through VSCode (Using the remote-ssh extension) 

PROGNAME="$0"
# PROGNAME=$(readlink -f "$0")

usage() {
  cat << EOF

Script to start a session on gadi and connect to it through VSCode (using VSCode remote-ssh extension).

Usage: $PROGNAME [ PBS-directives ] [ --user <Gadi User> ] [ --ssh-config <ssh-config file> ] [ --code <path to 'code' executable> ] [ --help ]

Keywords:
    --user <Gadi User> 
        Specify the Username to connect to Gadi.

    --ssh-config <ssh-config file>
        Specify the ssh-config file to get the Username for the connection to Gadi.

    --code <path to 'code' executable>
        Specify VSCode's CLI 'code' executable file, if not in PATH.

    -h, --help
        Print this manual.

    PBS-directives
        The following options are taken from the PBS-directives:
        
        -P <project>
            The project which you want to charge the job resource usage to. 
            If missing, it is set to the default project in the shell environment from which the job is submitted.

        -q <queue>
            The queue to run the job in.
            If missing, it is set to 'normalbw'.
            Different queues have different limits of the amount of resources can be requested using the '-l' flag.

        -l walltime=<HH:MM:SS>
            The wall clock time limit for the job. Time is expressed in the form:[[hours:]minutes:]seconds.
            If missing, it is set to 01:00:00. 

        -l storage=<scratch/a00+gdata/xy11+massdata/a00>
            Identifies the specific filesystems that the job will need access to. It is expressed as a plus-separated 
            list of identifiers of the form <filesystem>/<project>. 
            The valid filesystems are currently scratch (for Gadi's /scratch  filesystem), gdata (for Gadi's /g/data filesystem), and massdata. 
            All jobs implicitly have scratch/<project> and gdata/<project> included in this list, where <project> is the project that the
            job is running under. Locations that are not specified via this directive will not be available inside the job, and will result
            in, for example, "file not found" errors if you attempt to access them.

        -l mem=<9GB>
            The total memory limit for the job's usage. 
            If missing, the value is set to 9GB.

        -l ncpus=<2>
            The number of CPU cores to allocate to the job. 
            If missing, the value is set to 2. 

        -l ngpus=<4>
            The number of GPU devices to allocate to the job (for jobs in the gpuvolta queue).

        -l jobfs=<100MB>
            The maximum amount of local disk available to the job on the hosting compute nodes.
            If missing, the value is set to 100MB.

        -M <user@example.com>
            The list of addresses to which emails about the job will be sent.

        -m <abe>
            The set of conditions under which email about the job is sent.
            It may be any combination of "a" for when the job is aborted by batch system, "b" for when the job begins execution,
            and "e" for when the job ends execution.

        -N <jobName>
            The name of the job. 
            By default it is set to <timestamp>_session, with timestamp being generated at the time of submission of the job.
EOF
  exit 1
}

while getopts "hP:q:l:M:m:N:-:" opt; do
    case $opt in
        -)  
            case $OPTARG in
                user)
                    if ! [[ -z ${!OPTIND} ]]; then
                        user=${!OPTIND}
                        shift 
                    else
                        echo "${PROGNAME}: option requires an argument -- ${OPTARG}"
                        echo "Type $PROGNAME -h for the complete usage doc."
                    fi
                ;;
                ssh-config)
                    if ! [[ -z ${!OPTIND} ]]; then
                        ssh_config_file=${!OPTIND}
                        shift 
                    else
                        echo "${PROGNAME}: option requires an argument -- ${OPTARG}"
                        echo "Type $PROGNAME -h for the complete usage doc."
                    fi
                ;;                
                code)
                    if ! [[ -z ${!OPTIND} ]]; then
                        code_bin=${!OPTIND}
                        shift 
                    else
                        echo "${PROGNAME}: option requires an argument -- ${OPTARG}"
                        echo "Type $PROGNAME -h for the complete usage doc."
                    fi
                ;;
                help)
                    usage
                ;;
                *)
                    echo "${PROGNAME}: illegal option -- ${OPTARG}"
                    echo "Type $PROGNAME -h for the complete usage doc."
                ;;
            esac
        ;;
        P)
            project="$OPTARG"
            pbs_options+="-${opt} $OPTARG "
        ;;
        q)
            queue=$OPTARG
            pbs_options+="-${opt} $OPTARG "
        ;;
        N)
            name=$OPTARG
            pbs_options+="-${opt} $OPTARG "
        ;;
        [Mm]) 
            pbs_options+="-${opt} $OPTARG "
        ;;
        l)
            grep -P "[ \t]" <<< "$OPTARG" > /dev/null && echo -e "'-l' directives cannot contain spaces or tabs.\nIf you need to declare multiple '-l' directives, please separate them with a comma."
            for option in $(awk 'BEGIN { FS="," } ; { for (i=1; i<=NF; i++) { print($i) }}' <<< "$OPTARG")
            do  
                if ! [[ -z $(grep -Po "^walltime=\K.*" <<< $option) ]]; then
                    if [[ -z $walltime ]]; then
                        walltime=$(grep -Po "^walltime=\K.*" <<< $option)
                    else
                        echo "Multiple '-l walltime' directives specified."
                        exit 1
                    fi
                elif ! [[ -z $(grep -Po "^storage=\K.*" <<< $option) ]]; then
                    if [[ -z $storage ]]; then
                        storage=$(grep -Po "^storage=\K.*" <<< $option)
                    else
                        echo "Multiple '-l storage' directives specified."
                        exit 1
                    fi
                elif ! [[ -z $(grep -Po "^mem=\K.*" <<< $option) ]]; then
                    if [[ -z $mem ]]; then
                        mem=$(grep -Po "^mem=\K.*" <<< $option)
                    else
                        echo "Multiple '-l mem' directives specified."
                        exit 1
                    fi
                elif ! [[ -z $(grep -Po "^ncpus=\K.*" <<< $option) ]]; then
                    if [[ -z $ncpus ]]; then
                        ncpus=$(grep -Po "^ncpus=\K.*" <<< $option)
                    else
                        echo "Multiple '-l ncpus' directives specified."
                        exit 1
                    fi
                elif ! [[ -z $(grep -Po "^ngpus=\K.*" <<< $option) ]]; then
                    if [[ -z $ngpus ]]; then
                        ngpus=$(grep -Po "^ngpus=\K.*" <<< $option)
                    else
                        echo "Multiple '-l ngpus' directives specified."
                        exit 1
                    fi
                elif ! [[ -z $(grep -Po "^jobfs=\K.*" <<< $option) ]]; then
                    if [[ -z $jobfs ]]; then
                        jobfs=$(grep -Po "^jobfs=\K.*" <<< $option)
                    else
                        echo "Multiple '-l jobfs' directives specified."
                        exit 1
                    fi
                else
                    echo "PBS '-l $option' directive not supported"
                    exit 1
                fi
                pbs_options+="-${opt} $option "
            done
        ;;
        I)
        ;;
        h) 
            usage
        ;;
    esac
done

# Check that VSCode and remote-ssh are installed:
errmsg_no_vscode () {
    cat << EOF
VSCode's CLI executable '$1' not found.
If VSCode is installed, please specify the path to the CLI 'code' executable with:
$PROGNAME --code <path to 'code' executable>
Otherwise, please install VSCode --> https://code.visualstudio.com/download
EOF
    exit 7
}

errmsg_no_code_executable () {
    cat << EOF
No VSCode '$code_bin' executable found.
EOF
    exit 8
}

if [[ -z "$code_bin" ]]; then
    code_bin=code
else
    [[ -f "$code_bin" ]] || errmsg_no_code_executable
fi
    
code -v &> /dev/null || errmsg_no_vscode $code_bin
# Check that remote-ssh extension is installed, otherwise install it
remote_ssh_id=ms-vscode-remote.remote-ssh
if [[ -z $(code --list-extensions | grep "^$remote_ssh_id$") ]]; then
    echo -e "No 'remote-ssh' extension found in VSCode."
    $code_bin --install-extension $remote_ssh_id
fi

timestamp=$(date +%s)

# DEFAULT VALUES
# If queue is not specified, use 'normalbw'
if [[ -z "$queue" ]]; then
    queue=normalbw
    pbs_options+="-q $queue "
fi
# If name is not specified, set to ${timestamp}_session
if [[ -z "$name" ]]; then
    name=${timestamp}_session
    pbs_options+="-N $name "
fi
# If walltime is not specified, set to 01:00:00
if [[ -z "$walltime" ]]; then
    walltime=01:00:00
    pbs_options+="-l walltime=$walltime "
fi
# If ncpus is not specified, set to 2
if [[ -z "$ncpus" ]]; then
    ncpus=2
    pbs_options+="-l ncpus=$ncpus "
fi
# If mem is not specified, set to 9GB
if [[ -z "$mem" ]]; then
    mem=9GB
    pbs_options+="-l mem=$mem "
fi

tmp_script=tmp_script_${timestamp}
tmp_file=tmp_file_${timestamp}

show_cursor () {
    tput cvvis
}

hide_cursor () {
    tput civis
}

ermmsg_no_user () {
    cat << EOF
Failed to understand the gadi.nci.org.au 'User' from the $ssh_config_file file. 
To specify a User use the '--user <user>' flag.
Type $PROGNAME -h for the complete usage doc.
EOF
exit 2
}

errmsg_no_config_file () {
    cat << EOF
No $ssh_config_file found.
To specify a custom ssh config file use the '--ssh-config <path to ssh-config file>' flag.
Type $PROGNAME -h for the complete usage doc.
EOF
exit 3
}

ermmsg_multiple_user () {
    cat << EOF
Multiple gadi.nci.org.au Users found in the $ssh_config_file file. 
To specify a User use the '--user <user>' flag.
Type $PROGNAME -h for the complete usage doc.
EOF
exit 4
}

errmsg_gadi_connection () {
    cat << EOF
Impossible to connect to $1. Check your $ssh_config_file file.
EOF
rm -f $HOME/$tmp_script
exit 5
}

errmsg_qsub () {
    cat <<EOF
Failed to submit job. Check qsub options.
EOF
ssh $1 "rm -f \$HOME/$tmp_script"
show_cursor
exit 6
}

# If User was not specified
if [[ -z $user ]]; then
    # If no ssh-config file specified, set ssh-config file to ~/.ssh/config
    [[ -z "$ssh_config_file" ]] && ssh_config_file=$HOME/.ssh/config
    # If a config file exists
    if [[ -f "$ssh_config_file" ]]; then
        # Get gadi User
        user=$(cat $ssh_config_file | tr '\n' ' ' | awk 'BEGIN { FS = "Host " } ; { for (i=1; i<=NF; i++) { if ($i ~ /[ \t]+[^#]*[ \t]+Hostname[ \t]+gadi\.nci\.org\.au[ \t]+/) { print $i }}}' | grep -Po ".*?User[ \t]*\K\S*")
        # If no user found raise error
        [[ -z "$user" ]] && ermmsg_no_user
        # If more than one user found raise error
        [[ -z $(echo $user | grep -P "\s") ]] || ermmsg_multiple_user
    else
        # If no config file raise error
        errmsg_no_config_file    
    fi
fi
host_gadi=${user}@gadi.nci.org.au
# write tmp script to start the session and get ssh configuration on gadi
cat > $HOME/$tmp_script <<EOFF
#!/bin/bash

checkfile=\$HOME/${timestamp}_checkfile
command="qsub $pbs_options <<< \"touch \$checkfile ; sleep infinity\""

echo -e "Session requested with the following directives:\n'$pbs_options'"
tmux new -d -s tmux_sess_${timestamp} "\$command"

# Wait until sessions starts
sleep 0.5
status=\$(qstat -f | tr '\n' ' ' | grep -Po "Job_Name = ${name}.*?job_state = \K.*?\S")
[[ -z \$status ]] && exit 6
k=5
while true
do    
    if [[ -f \$checkfile ]]; then
        rm -f \$checkfile
        echo -e "\033[2K\rSession started!"
        break
    else
        if [[ \$k == 5 ]]; then
            echo -ne "\033[2K\rWaiting for the session to start"
            k=0
        else
            echo -n "."
        fi
	((k++))       
    fi
    sleep 0.8
done

# Get hostname
hostname=\$(qstat -f | tr '\n' ' ' | grep -Po "Job_Name = ${name}.*?exec_host = \K.*?(?=/)")
cat > \$HOME/$tmp_file <<< \$hostname
EOFF


# Copy the tmp script
scp $HOME/$tmp_script ${host_gadi}:~/ > /dev/null || errmsg_gadi_connection $host_gadi
rm -f $HOME/$tmp_script

# run the tmp script on gadi
hide_cursor
ssh -X $host_gadi "chmod u+x \$HOME/$tmp_script; \$HOME/$tmp_script" || errmsg_qsub $host_gadi 
# delete tmp_script on gadi
ssh $host_gadi "rm -f \$HOME/$tmp_script"
show_cursor

hostname=$(ssh $host_gadi "cat \$HOME/$tmp_file ; rm -f \$HOME/$tmp_file")
gadi_home=$(ssh $host_gadi "echo \$HOME")
echo "Hostname: ${hostname}.gadi.nci.org.au"

# # If it's possible to run a Proxyjump directly from CLI via vscode use something like this:
# # echo "code --folder-uri vscode-remote://ssh-remote+-J+${user}@gadi.nci.org.au+${user}@${hostname}.gadi.nci.org.au"

# # Otherwise, include another config file in the ssh-config file, with the specifications of the connection

cat > $HOME/tmp_config <<EOF
Host session_${timestamp}
        ProxyJump ${user}@gadi.nci.org.au
        User ${user}
        ForwardX11 true
        ForwardX11Trusted yes
        Hostname ${hostname}
EOF

[[ -z $(cat $ssh_config_file | grep "^Include $HOME/tmp_config$") ]] && cat >> $ssh_config_file <<< "Include $HOME/tmp_config"
# Open VSCode
code --folder-uri "vscode-remote://ssh-remote+session_${timestamp}/${gadi_home}"

# # Create log file to output stout and sterr from qsub

